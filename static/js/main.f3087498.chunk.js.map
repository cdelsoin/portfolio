{"version":3,"sources":["pages/HomePage/headshot.jpg","pages/HomePage/styles.js","pages/HomePage/index.js","app/App.js","serviceWorker.js","index.js"],"names":["module","exports","styles","container","backgroundColor","height","width","display","justifyContent","alignItems","headshot","maxHeight","borderRadius","boxShadow","bio","flexDirection","color","fontSize","bioText","textAlign","link","textDecoration","HomePage","css","src","logo","alt","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,sC,gLCgE5BC,EAhEA,CACXC,UAAW,CACPC,gBAAiB,YACjBC,OAAQ,QACRC,MAAO,OACPC,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAEhBC,SAAU,CACNL,OAAQ,SACRM,UAAW,QACXC,aAAc,MACdC,UAAW,mBACX,2BAA4B,CACxBR,OAAQ,UAEZ,2BAA4B,CACxBA,OAAQ,WAGhBS,IAAK,CACDP,QAAS,OACTQ,cAAe,MACfP,eAAgB,eAChBC,WAAY,SACZO,MAAO,QACPV,MAAO,QACP,2BAA4B,CACxBS,cAAe,SACfP,eAAgB,UAEpB,2BAA4B,CACxBO,cAAe,SACfP,eAAgB,SAChBF,MAAO,MACPW,SAAU,UAGlBC,QAAS,CACLZ,MAAO,QACPW,SAAU,OACV,2BAA4B,CACxBA,SAAU,QACVE,UAAW,UAEf,2BAA4B,CACxBb,MAAO,OACPW,SAAU,QACVE,UAAW,WAGnBC,KAAM,CACFC,eAAgB,OAChBL,MAAO,UACP,YAAa,CACTA,MAAO,WAEX,UAAW,CACPA,MAAO,UCtDZ,SAASM,IAEZ,OACI,mBAAKC,IAAKrB,EAAOC,WACb,mBAAKoB,IAAKrB,EAAOY,KACb,mBAAKU,IAAKC,IAAMF,IAAKrB,EAAOQ,SAAUgB,IAAI,SAC1C,uBACI,iBAAGH,IAAKrB,EAAOgB,SAAf,0LAE6F,IACzF,iBAAGK,IAAKrB,EAAOkB,KAAMO,KAT7B,6CASQ,YAHJ,Q,MCJLC,MAJf,WACI,OAAO,kBAACN,EAAD,OCOSO,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXvCC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDkHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f3087498.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/headshot.632788c6.jpg\";","const styles = {\n    container: {\n        backgroundColor: '#00808080', // teal with 50% opacity\n        height: '100vh',\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    headshot: {\n        height: '30vmin',\n        maxHeight: '320px',\n        borderRadius: '50%',\n        boxShadow: '0 0 15px #000000',\n        '@media(max-width: 920px)': {\n            height: '50vmin'\n        },\n        '@media(max-width: 420px)': {\n            height: '60vmin'\n        }\n    },\n    bio: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-around',\n        alignItems: 'center',\n        color: 'white',\n        width: '900px',\n        '@media(max-width: 920px)': {\n            flexDirection: 'column',\n            justifyContent: 'center'\n        },\n        '@media(max-width: 420px)': {\n            flexDirection: 'column',\n            justifyContent: 'center',\n            width: '80%',\n            fontSize: '5vmin'\n        }\n    },\n    bioText: {\n        width: '500px',\n        fontSize: '24px',\n        '@media(max-width: 920px)': {\n            fontSize: '4vmin',\n            textAlign: 'center'\n        },\n        '@media(max-width: 420px)': {\n            width: '100%',\n            fontSize: '5vmin',\n            textAlign: 'center'\n        }\n    },\n    link: {\n        textDecoration: 'none',\n        color: '#004848',\n        '&:visited': {\n            color: '#004848'\n        },\n        '&:hover': {\n            color: 'teal'\n        }\n    }\n};\n\nexport default styles;\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport logo from './headshot.jpg';\nimport styles from './styles';\n\nexport function HomePage() {\n    const url = 'https://www.linkedin.com/in/cliffdelsoin/';\n    return (\n        <div css={styles.container}>\n            <div css={styles.bio}>\n                <img src={logo} css={styles.headshot} alt=\"logo\" />\n                <div>\n                    <p css={styles.bioText}>\n                        I'm Cliff Delsoin, a software engineer based out of Boston, MA specializing in React and React\n                        Native application development. If you'd like to get in touch feel free to reach out via{' '}\n                        <a css={styles.link} href={url}>LinkedIn</a>.\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport { HomePage } from '../pages';\nimport './App.css';\n\nfunction App() {\n    return <HomePage />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}